<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>一只傻哈皮</title>
    <link>https://hapi666.github.io/</link>
    <description>Recent content on 一只傻哈皮</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <copyright>All rights reserved - 2017</copyright>
    <lastBuildDate>Thu, 04 Oct 2018 22:58:50 +0800</lastBuildDate>
    
	<atom:link href="https://hapi666.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTML</title>
      <link>https://hapi666.github.io/post/html/</link>
      <pubDate>Thu, 04 Oct 2018 22:58:50 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/html/</guid>
      <description>HTML的学习开始了 嵌套元素 &amp;lt;p&amp;gt; My dog is &amp;lt;strong&amp;gt;very&amp;lt;/strong&amp;gt; grumpy. &amp;lt;/p&amp;gt;  嵌套就是指标签的嵌套而已，非常简单，也很好理解。
块级元素和内联元素 块级元素()单独成一行，而内联元素(比如、等)通常嵌套在块级元素内。
&amp;lt;body&amp;gt; &amp;lt;p&amp;gt; 我的GitHub:&amp;lt;em&amp;gt;https://github.com/hapi666&amp;lt;/em&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;  也很好理解，好，继续。
空元素 不是所有元素都拥有开始标签，内容和结束标记. 一些元素只有一个标签，通常在此元素所在位置插入/嵌入一些东西。例如&amp;lt;img&amp;gt;是用来在&amp;lt;img&amp;gt;位置插入一张指定图片的。
&amp;lt;img src=&amp;quot;https://raw.githubusercontent.com/mdn/beginner-html-site/gh-pages/images/firefox-icon.png&amp;quot;&amp;gt;  属性 元素可以拥有属性。属性也有很多。
&amp;lt;a class=&amp;quot;link-github&amp;quot; href=&amp;quot;https://github.com/&amp;quot;&amp;gt;Github&amp;lt;/a&amp;gt;  布尔属性 有时你会看到没有具体值的属性，首先，它是合法的，它被我们称为布尔属性。它们只有跟它们属性名一样的属性值。例如disabled属性，它们可以标记表单输入使之变为不可用(变灰色)，此时用户不能向它们输入任何数据。
&amp;lt;input type=&amp;quot;text&amp;quot; disabled&amp;gt;  省略包围属性值的引号 当你浏览那些粗糙的web网站，你将会看见各种各样奇怪的标记风格，其中就有不给属性值添加引号。在某些情况下它是被允许的，但是其他情况下会破坏你的标记。例如，我们可以写一个只拥有一个href属性的链接，如下：
&amp;lt;a href=https://www.mozilla.org/&amp;gt;favorite website&amp;lt;/a&amp;gt;  然而，当我们再添加一个title属性时就会出错，如下：
&amp;lt;a href=https://www.mozilla.org/ title=The Mozilla homepage&amp;gt;favorite website&amp;lt;/a&amp;gt;  此时浏览器会误解你的标记，它会把title属性理解为三个属性——title的属性值为&amp;rdquo;The“，另外还有两个布尔属性“Mozilla”和“homepage”。看下面的例子，它明显不是我们所期望的，并且在这个编码里面它会报错或者出现异常行为。试一试把鼠标移动到连接上，看会显示什么title属性值!（是The）
所以强烈建议为属性值加引号
单引号VS双引号 这只是风格习惯问题，用哪个都可以。
但是如果你想将引号作为文本显示在HTML中，你就必须“转义”一下，就是引用它的实体。举个例子：
&amp;lt;p&amp;gt;In HTML, you define a paragraph using the &amp;quot;element&amp;quot;.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;In HTML, you define a paragraph using the &amp;amp;quot;element&amp;amp;quot;.</description>
    </item>
    
    <item>
      <title>关于Slice的几点总结</title>
      <link>https://hapi666.github.io/post/slice/</link>
      <pubDate>Mon, 01 Oct 2018 21:37:55 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/slice/</guid>
      <description> var和make定义方式 使用var定义 var intSlice []int var stringSlice []string //等等，不多余赘述。  使用make定义 mSlice:=make([]type,len,cap) //len是mSlice的长度，cap是mSlice的容量 //长度是已有长度，容量是这个slice的最大长度  下面这两种定义效果一样 var s1 []int s2:=make([]int,0,0)  使用make定义slice的几种方式比较 1.长度和容量都是0，即make([]type,0,0)或make([]type,0) s1:=make([]int,0) for i=0;i&amp;lt;10;i++ { s1=append(s1,i) fmt.Printf(&amp;quot;切片：%v,切片地址：%p,切片长度：%v,切片容量：%v&amp;quot;,s1,s1,len(s1),cap(s1)) }  结论 ：切片长度容量是不断变化的，并且不断重新分配内存，所以效率低下。
2.长度是0，容量不是0，即make([]type,0,cap) s2:=make([]int,0,10) for i=0;i&amp;lt;10;i++ { s2=append(s2,i) fmt.Printf(&amp;quot;切片：%v,切片地址：%p,切片长度：%v,切片容量：%v&amp;quot;,s2,s2,len(s2),cap(s2)) }  结论：切片长度不断变化，容量不变，内存不重新分配，所以效率高。
3.长度容量都不是0，即make([]type,len,cap) s3:=make([]int,10,10) for i=0;i&amp;lt;10;i++ { s3=append(s3,i) fmt.Printf(&amp;quot;切片：%v,切片地址：%p,切片长度：%v,切片容量：%v&amp;quot;,s3,s3,len(s3),cap(s3)) }  结论：切片长度不断变化，容量=起初容量+长度，内存不重新分配，所以效率高，但会出现默认值(因为长度是10，所以会出现10个是0的默认值)，不利于操作。
综合以上结论考虑：建议使用第二种make方式定义slice 即make([]type,0,cap) </description>
    </item>
    
    <item>
      <title>Defer</title>
      <link>https://hapi666.github.io/post/defer/</link>
      <pubDate>Fri, 28 Sep 2018 19:23:53 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/defer/</guid>
      <description>Defer使用时的坑 先看几个例子
1.
func f() (result int) { defer func() { result++ }() return 0 }  2.
func f() (r int) { t := 5 defer func() { t = t + 5 }() return t }  3.
func f() (r int) { defer func(r int) { r = r + 5 }(r) return 1 }  例1的正确答案不是0，例2的正确答案不是10，例3的正确答案不是6……
Why???
= =!
要使用defer时不踩坑，最重要的一点就是要明白，return xxx这一条语句并不是一条原子指令! 那啥是原子指令？？
所谓原子操作是指不会被 线程调度机制 打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。</description>
    </item>
    
  </channel>
</rss>