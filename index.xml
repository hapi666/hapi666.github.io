<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>一只傻哈皮</title>
    <link>https://hapi666.github.io/</link>
    <description>Recent content on 一只傻哈皮</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <copyright>All rights reserved - 2018</copyright>
    <lastBuildDate>Tue, 27 Feb 2018 00:39:44 +0800</lastBuildDate>
    
	<atom:link href="https://hapi666.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo备忘</title>
      <link>https://hapi666.github.io/post/hugo%E5%A4%87%E5%BF%98/</link>
      <pubDate>Tue, 27 Feb 2018 00:39:44 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/hugo%E5%A4%87%E5%BF%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go的导出规则</title>
      <link>https://hapi666.github.io/post/go%E7%9A%84%E5%AF%BC%E5%87%BA%E8%A7%84%E5%88%99/</link>
      <pubDate>Mon, 26 Feb 2018 22:39:19 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/go%E7%9A%84%E5%AF%BC%E5%87%BA%E8%A7%84%E5%88%99/</guid>
      <description> Go导出规则 变量、函数/方法、结构体字段。均分为可导出和不可导出。
什么叫可导出呢？
可以被其他package访问，例如otherpackage.Func
不可导出也显而易见了，就是不可以被其他package用的
对于变量 / 函数/方法 / 结构体字段 1.首字符为大写字母
2.该变量在package中已声明
示例代码如下：
package xxx var W int func F(){ ... } type S struct { T1 //字段名字是 T1 *T2 //字段名字是 T2 P.T3 //字段名字是 T3 x, y int //字段名字是 x 和 y }  </description>
    </item>
    
    <item>
      <title>Go里面的传参和传引用</title>
      <link>https://hapi666.github.io/post/2018.2.24/</link>
      <pubDate>Sat, 24 Feb 2018 19:13:30 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/2018.2.24/</guid>
      <description>关于Go里面传参和传引用 Go函数或方法中参数列表里面的都是值传递！！（包括Slice,chan,map）
当闭包使用到外部变量的时候使用的是该变量的引用类型，闭包函数的参数列表也是值传递！</description>
    </item>
    
    <item>
      <title>反射reflect</title>
      <link>https://hapi666.github.io/post/2018.1.29/</link>
      <pubDate>Sun, 28 Jan 2018 23:53:05 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/2018.1.29/</guid>
      <description></description>
    </item>
    
    <item>
      <title>cookie与session</title>
      <link>https://hapi666.github.io/post/2018.1.27/</link>
      <pubDate>Sat, 27 Jan 2018 00:29:43 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/2018.1.27/</guid>
      <description>·Session Session代表服务器与浏览器的一次会话过程，这个过程是连续的，也可以时断时续的。
session是一种数据结构，产生于服务端也存储在服务端。
session因为请求（request对象）而产生，同一个会话中多个request共享了一session对象，可以直接从请求中获取到session对象。
·为什么要有session这个东西存在？
由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。
·服务端如何存放session？
内存、数据库、文件、集群等等。
·Session删除的时间是： Session超时：超时指的是连续一定时间服务器没有收到该Session所对应客户端的请求，并且这个时间超过了服务器设置的Session超时的最大时间。
·session的id是从哪里来的，sessionID是如何使用的？
当客户端第一次请求的时候，服务器会为客户端创建一个session，并将通过特殊算法算出一个session的ID，用来标识该session对象，当浏览器下次（session继续有效时）请求别的资源的时候，浏览器会偷偷地将sessionID放置到请求头中，服务器接收到请求后就得到该请求的sessionID，服务器找到该id的session返还给请求者使用。一个会话只能有一个session对象，对session来说是只认id不认人。
Cookie(token) ·cookie是什么？
举个简单的例子，现在当我们浏览网站的时候，经常会自动保存账号与密码，这样下次访问的时候，就可以直接登录了。这种技术的实现就是利用了cookie技术。
cookie存储在客户端。
浏览器第一次连接特定服务器时没有cookie
cookie里面保存session_id
·cookie的应用过程 由服务器将cookie添加到response里一并返回给客户端，然后客户端会自动把response里的cookie接收下来，并且保存到本地，下次发出请求的时候，就会把cookie附加在request里，服务器在根据request里的cookie遍历搜索是否有与之符合的信息。 cookie是存在客户端的，实际上就是在客户端与服务端交换的一小段数据（一个name/string对）
cookie存储在客户端，但对cookie的操作在后端，比如比较cookie里面的session_id</description>
    </item>
    
    <item>
      <title>客户端与服务器通信过程,http.Handle与http.HandleFunc的区别</title>
      <link>https://hapi666.github.io/post/2018.1.25d2/</link>
      <pubDate>Thu, 25 Jan 2018 16:29:46 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/2018.1.25d2/</guid>
      <description> · 客户端与服务器之间的通信 一切都是由客户端的一个请求(request)开始的 首先，客户端向服务端发送一个request，当request到达服务器时，多路复用器(multiplexer)会对request进行检查，并将请求重定向 到正确的处理器进行处理。 处理器在接收到多路复用器转发的request之后，会从请求中取出相应的信息，并根据这些信息对请求进行处理。在request处理完 毕之后，处理器会将所得数据传递给模板引擎，而模板引擎则会根据这些数据生成将要返回给客户端的HTML。 · http.Handle与http.HandleFunc的区别 首先看它们俩的构成： func Handle(pattern string,handler Handler) { } func HandleFunc(pattern string,handler func(ResponseWriter,*Request)) { } type Handler interface { ServerHTTP(w ResponseWriter,r *Request) }  所以不难看出， Handle()函数的第二个参数handler必须实现了func (handler)ServerHTTP(ResponseWriter,*Request)方法 而 ServerHTTP()函数就是HandleFunc()函数的第二个参数 总结一下，对于那种路由器函数就采用HandleFunc()函数，对于实现了Handler接口的路由就采用Handle()函数. </description>
    </item>
    
    <item>
      <title>Package</title>
      <link>https://hapi666.github.io/post/2018.1.25/</link>
      <pubDate>Thu, 25 Jan 2018 14:49:00 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/2018.1.25/</guid>
      <description>由上图，显而易见Go中的package是怎么加载的。
每次加载一个package，都会执行该package的init()函数，这是无需调用init()的。</description>
    </item>
    
    <item>
      <title>很小很杂的点</title>
      <link>https://hapi666.github.io/post/2018.1.23/</link>
      <pubDate>Tue, 23 Jan 2018 22:44:01 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/2018.1.23/</guid>
      <description>stat()函数 //是通过文件名filename来获取文件的属性值</description>
    </item>
    
    <item>
      <title>2018.1.21——Golang小知识</title>
      <link>https://hapi666.github.io/post/2018.1.21/</link>
      <pubDate>Sun, 21 Jan 2018 00:40:36 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/2018.1.21/</guid>
      <description>看项目代码看见的关于string与slice之前的转化 首先上我看到的代码
func (this *YamlConfig) MustValue(key string, defaultVal ...string) string { val, err := this.Value(key) if len(defaultVal) &amp;gt; 0 &amp;amp;&amp;amp; err != nil { return defaultVal[0] } return val }  对于defaultVal是一个string类型的变量，可是在return后面返回的是defaultVal[0]，，，这是干什么呢？我很疑惑。。
后来我尝试输出一个string类型变量的酱紫形式:
package main import &amp;quot;fmt&amp;quot; func main(){ str:=&amp;quot;23&amp;quot; fmt.Println(str[0]) }  得到的结果是:50
So,可以知道，它输出的是2的ascii码值
哦，那上面我有疑惑的代码返回 的是一个ascii值
欸，不对啊，我仔细一看，返回值类型是string啊
ASCII是int型的变量啊= =
那么我对于上述有疑问的代码我就更加不解了
后来我又做了几次尝试
如下:
package main import ( &amp;quot;fmt&amp;quot; ) func func_name(str ...string) string { return str[0] } func main() { var str string str = &amp;quot;23&amp;quot; /*str := []string{&amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;}*/ fmt.</description>
    </item>
    
    <item>
      <title>2018.1.19——interface</title>
      <link>https://hapi666.github.io/post/2018.1.19/</link>
      <pubDate>Fri, 19 Jan 2018 00:08:24 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/2018.1.19/</guid>
      <description>接口(interface) 接口从本质上说就是几个方法的集合，接口描述了类型的行为
接口的命名一般是：&amp;hellip;r/&amp;hellip;able等(由r/able后缀组成)
在Go语言中接口可以有值，一个接口类型的变量就是一个接口值(var ai Namer)，接口值是一个多字数据结构，其初始化值为nil，虽然和指针不是完全相同的东西，但实际上是一个指针。故指向接口值的指针是非法的，指向接口的指针不仅一点用处没有，还会导致代码错误。所以在函数参数列表里面用接口指针是错误的！
对于任何一个类型，只要实现了接口中的所有方法即为实现了该接口。当然它还可以有其他方法。
类型不需要显式声明它实现了某个接口，接口隐式地被实现。
多个类型可以实现同一接口。
一个类型可以实现多个接口。
即使接口在类型之后才定义，二者处于不同的包中，被单独编译：只要类型实现了接口中的方法，它就实现了此接口。
package main import ( &amp;quot;fmt&amp;quot; ) type easy struct { value int } type easier interface { name(p1 int, p2 int) int } func (e *easy) name(p1 int, p2 int) int { fmt.Println(p1 * p2) return p1 * p2 } func main() { test := new(easy) tester := easier(test) tester.name(6, 6) }  输出：36
接口类型的数组，展示多态。
一个接口可以嵌套到另一个接口中。
假设varM是一个接口类型的变量，检测它的动态类型(运行时在变量中存储的值的实际类型)的方式是：v:=varM.(T) //检测它是否是T类型</description>
    </item>
    
    <item>
      <title>2018寒假目标</title>
      <link>https://hapi666.github.io/post/2018.1.18/</link>
      <pubDate>Thu, 18 Jan 2018 23:34:39 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/2018.1.18/</guid>
      <description> · 写 写 写 (这对我来说意义不一样，我很懒) · 博客系统一个 · 面向对象的思想！！！！class！！！ · 愿我2018.3.1回头再看你时，已全部搞定 持续更新&amp;hellip;&amp;hellip;&amp;hellip; </description>
    </item>
    
  </channel>
</rss>