<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>一只傻哈皮</title>
    <link>http://hapi666.com/</link>
    <description>Recent content on 一只傻哈皮</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Sep 2018 19:23:53 +0800</lastBuildDate>
    
	<atom:link href="http://hapi666.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Defer</title>
      <link>http://hapi666.com/post/defer/</link>
      <pubDate>Fri, 28 Sep 2018 19:23:53 +0800</pubDate>
      
      <guid>http://hapi666.com/post/defer/</guid>
      <description>Defer使用时的坑 先看几个例子
1.
func f() (result int) { defer func() { result++ }() return 0 }  2.
func f() (r int) { t := 5 defer func() { t = t + 5 }() return t }  3.
func f() (r int) { defer func(r int) { r = r + 5 }(r) return 1 }  例1的正确答案不是0，例2的正确答案不是10，例3的正确答案不是6……
Why???
= =!
要使用defer时不踩坑，最重要的一点就是要明白，return xxx这一条语句并不是一条原子指令! 那啥是原子指令？？
所谓原子操作是指不会被 线程调度机制 打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。</description>
    </item>
    
  </channel>
</rss>