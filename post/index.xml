<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 一只傻哈皮</title>
    <link>https://hapi666.github.io/post/</link>
    <description>Recent content in Posts on 一只傻哈皮</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <copyright>All rights reserved - 2017</copyright>
    <lastBuildDate>Mon, 22 Jul 2019 01:06:17 +0800</lastBuildDate>
    
	<atom:link href="https://hapi666.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>细说三次握手与四次挥手</title>
      <link>https://hapi666.github.io/post/shake_hands/</link>
      <pubDate>Mon, 22 Jul 2019 01:06:17 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/shake_hands/</guid>
      <description>seq, ack, fin seq: 确认序列 ack: 确认包 fin: 断开连接包 三次握手 客户端先发送 SYN=x 请求建立连接
服务器返回 ACK=x+1，SYN=Y
客户端再回复 ACK=Y+1 建立连接成功
为什么是三次握手？ 假设 client 端向 server 端发送了一个请求报文（没有丢失的报文），但是不幸在网络节点中被滞留了，以至于延误了，直到 client 端释放了该连接之后才抵达 server 端，
如果在没有第三次握手的前提下，那么 server 端会直接建立连接成功，但是 client 端这个连接对于它来讲已经失效了，所以它不会用这个连接去跟 server 进行沟通了，也就是说它不会再发任何数据给 server 端了，那么这样导致的就是呢一次连接的浪费
如果有第三次握手呢，server 端对 client 传过来的这个报文请求会向其发送 ACK 和 SYN，等待 client 回复 ACK 确认消息，该连接才会被认为是有效的，这样一来，就不会出现浪费资源的情况。
从而证明三次握手是必要的！ 第二次握手证明 client=&amp;gt;server 是没问题的 第三次握手证明 server=&amp;gt;client 是没问题的 TCP 是全双工通信的，由于网络通信是不可靠的，所以通过三次握手可以「最低限度」的确认全双工通信通道 四次挥手 想要断开连接的一方 向 对方 发送一个 FIN 数据包，对方收到之后回复一个 ACK ，在间隔一段时间之后，再发送 FIN, 然后 主动断开的一方 回复 对方 一个 ACK</description>
    </item>
    
    <item>
      <title>Linux基础命令</title>
      <link>https://hapi666.github.io/post/linux-command/</link>
      <pubDate>Wed, 05 Jun 2019 19:00:57 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/linux-command/</guid>
      <description>修改权限 #ls命令输出的前两个格式 [d/-/l] [rwx][rwx][rwx] #d说明是文件夹，-说明是文件，l说明是一个链接文件 #第二个是部分是三组权限，从左到右分别对应「拥有者权限」、「所属群组权限」、「其他人权限」 #r是读权限，w是写权限，x是可执行权限，如果没有对应的权限则用-占位  #修改.baserc文件的权限 #第一种数字类型改变权限 #r:4,w:2,x:1; 相加占位 chmod 755 .baserc #第二种符号类型改变权限 #u是拥有者，g是群组，o是其他人，a是上述三个所有 chmod u=rwx,go=rx .baserc #为所有加上可写权限 chmod a+w .baserc #为所有删除可写权限 chmod a-w .baserc  对于纯文件来讲，「写」这个权限的意义是只针对其内容进行修改操作，而不针对其本身的修改(比方说删除这个权限)
对于目录文件来讲，「写」这个权限的意义就不一样了，它针对的是它下面所有的文件(包括目录文件，纯文件)的修改，注意，是对文件的修改</description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>https://hapi666.github.io/post/mysql/</link>
      <pubDate>Wed, 05 Jun 2019 18:54:22 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/mysql/</guid>
      <description> 必知必会 1⃣️ start、restart、stop mysql.server start mysql.server restart mysql.server stop  2⃣️ 修改密码  </description>
    </item>
    
    <item>
      <title>unsafe黑魔法</title>
      <link>https://hapi666.github.io/post/unsafe/</link>
      <pubDate>Mon, 24 Dec 2018 18:48:31 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/unsafe/</guid>
      <description>前言 大家应该都知道 Go 语言是不支持指针的运算和转换的。这是为什么呢？
由于 Go 语言是一门静态语言(也叫强类型语言)，所以所有的变量都必须为标量类型。不同类型之间不能够进行赋值、计算等跨类型的操作，比方说一个字符串不能赋值给一个 int 类型的变量，一个字符串也不能跟一个整数相加、相减等操作，一个字符串也不能强制转换为整数类型。由于指针也有其对应的类型，所以也在 Compile 的静态类型检查的范围内。同时，静态类型又叫强类型，意思就是这个变量一旦定义其类型，便不能再更改它。
像下面这种，就是不对的
number := 5 numberPointer := &amp;amp;number floatNumber := (*float32)(numberPointer) fmt.Println(floatNumber)  编译器会报错：
# command-line-arguments ...: cannot convert numberPointer (type *int) to type *float32  直接翻译就知道这是为什么会报错吧
unsafe 包 用它之前，我们要知道：
 它是围绕 Go 程序内存安全及类型的操作 用它写出来的程序很可能是不可移植的 不受 Go 1兼容性指南保护  unsafe.Pointer type ArbitraryType int type Pointer *ArbitraryType  ArbitraryType 仅用于来表示任意 Go 表达式类型，就是用来表示任意的含义，他并不属于 unsafe 包的一部分。
所以 Pointer 代表人意类型的指针，类似于 C 语言里面的 void*。</description>
    </item>
    
    <item>
      <title>Go Router</title>
      <link>https://hapi666.github.io/post/router/</link>
      <pubDate>Fri, 21 Dec 2018 18:56:53 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/router/</guid>
      <description>Go router 源码分析 先看一下最简单的 web server 服务8：
http.HandleFunc(&amp;quot;/&amp;quot;,func(w http.ResponseWriter,r *http.Request){ w.write([]byte(&amp;quot;hello world!&amp;quot;)) }) http.ListenAndServe(&amp;quot;:8080&amp;quot;,nil)  先观察一下这个，这段代码其实就是一个在本地的8080端口的http服务，当访问：127.0.0.1:8080的时候，页面就会输出 hello world！
不难发现，其实只要知道了 http.HandleFunc() 、http.ListenAndServe() 这俩个函数干了什么就知道这个服务是怎么跑起来的了。
那么先查看 HandleFunc() 源码8 hhh
我们就跳到源码里面的 HandleFunc() 里面
func HandleFunc(pattern string, handler func(ResponseWriter, *Request)){ DefaultServeMux.HandleFunc(pattern, handler) }  诶，这里好像继续调用 DefaultServeMux 的 HandleFunc 的方法了昂
那这个 DefaultServeMux 是什么呢？
type ServeMux struct{ mu sync.RWMutex m map[string]muxEntry hosts bool } var DefaultServeMux = &amp;amp;defaultServeMux var defaultServeMux ServeMux  找到了定义的部分，发现其实本质就是 ServeMux 结构体.
func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request)) { if handler == nil { panic(&amp;quot;http: nil handler&amp;quot;) } mux.</description>
    </item>
    
    <item>
      <title>GO Map底层实现</title>
      <link>https://hapi666.github.io/post/map/</link>
      <pubDate>Sat, 01 Dec 2018 12:37:08 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/map/</guid>
      <description>键值对与哈希表 键值对（key-value pair）
GO语言的字典类型其实是一个哈希表（hash table）的特定实现，在这个实现中，键与值最大的不同在于：键的类型是受限制的，而值可以是任意类型的
对键值对的增删改查是通过哈希表映射操作的
比如要在哈希表中查找某个与键对应的那个值，那么我们需要先把键值作为参数传给这个哈希表。
在 GO 语言中每个键值都是由它的哈希值代表的。也就是说字典 map 不会存储任何键的值，但会独立存储它们的哈希值。
1.哈希表会先用哈希函数把键值转换为哈希值。
哈希值通常是一个无符号整数。一个哈希表会持有一定数量的桶（bucket），也可称之为哈希桶，这些哈希桶会均匀地存储其所属哈希表收纳的那些键值对。
2.得到的无符号整数一拆为二，分别称为为高几位和低几位
3.用低几位去定位到一个哈希桶，然后用高几位去定位到具体的键 key
4.随后哈希表就会把相应的元素值作为结果返回
只要这个键值对存在于该哈希表中就一定会被查找到
关于 GO Map 的几个问题  NO.1 字典的键类型不能是哪些类型？  答案是不可以是函数类型、字典类型和切片类型。
GO Map 的键类型的值必须是可以支持判等操作的。由于函数类型、字典类型和切片类型并不支持判等操作，所以字典的键类型不能是这些类型。
另外，如果键的类型是接口类型的，那么键的实际类型也不能是上述三种类型，否则会引发 panic 恐慌。举个例子：
var badMap2 = map[interface{}]int{ &amp;quot;1&amp;quot;: 1, []int{2}: 2, // 这里会引发 panic。 3: 3, }  由于 badMap2 的键类型是 interface 类型，在编译期间不会报错。但是它的键里面却还是有切片类型 []int{2} 所以在运行时系统会抛出一个 panic 。
 NO.2 为什么键类型的值必须支持判等操作呢？  前面说定位到具体的哈希桶之后通过高几位再定位到键，那么是如何定位到键的呢？
首先，每个哈希桶都会把自己包含的所有键的哈希值存起来。Go 语言会用被查找键的哈希值与这些哈希值逐个对比，看看是否有相等的。如果一个相等的都没有，那么就说明这个桶中没有要查找的键值，这时 Go 语言就会立刻返回结果了。
如果有相等的，那就再用键值本身去对比一次。为什么还要对比？原因是：不同值的哈希值可能是相同的。这个术语叫：哈希碰撞。
反过来，哈希值一样，键也不一定一样。所以如果这个键类型的值不能判等，那么就无法定位这个键的具体位置了。</description>
    </item>
    
    <item>
      <title>Slice底层</title>
      <link>https://hapi666.github.io/post/slice_under/</link>
      <pubDate>Wed, 28 Nov 2018 17:56:29 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/slice_under/</guid>
      <description>数组 几乎所有计算机语言，数组的实现都是相似的：一段连续的内存。GO语言也一样，GO语言的数组底层实现就是一段连续的内存空间。
由于内存连续，CPU很容易计算索引，所以可以快速迭代数组里所有的元素。
C语言里面的Array是指向数组第一个元素的指针，GO语言的Array不像C语言里面的Array，在GO语言里，Array是一个Struct，一个数组变量就是整个数组。所以GO语言里Array是值类型，所以数组在传递的时候，传递的是原数组的拷贝。
GO语言slice底层数据结构 GO语言的Slice底层其实就是一个Struct：
type slice struct{ array unsafe.Pointer len int cap int }  它的struct包含三个字段：1.指向数组的指针 2.它的长度 3.它的容量
所以说，一个slice其实是截取了某个数组的一部分而已。
由于是指针，所以它的改变会直接影响到它所指向的数组。
当然我说的是影响它所指向的数组，如果它所指向的数组被更换了，就影响更换之后的数组了。
请看这段代码：
package main import ( &amp;quot;fmt&amp;quot; ) func main() { var s = [5]string{&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;} fmt.Printf(&amp;quot;原数组s:\n %v\n&amp;quot;, s) sli := s[0:5] newsli := append(sli, &amp;quot;t&amp;quot;) sli[1] = &amp;quot;x&amp;quot; fmt.Printf(&amp;quot;截取数组s后的sli:\n %v\n&amp;quot;, sli) fmt.Printf(&amp;quot;原数组s:\n %v\n&amp;quot;, s) fmt.Printf(&amp;quot;append sli后的newsli:\n %v\n&amp;quot;, newsli) newsli[0] = &amp;quot;w&amp;quot; fmt.Printf(&amp;quot;改变了newsli的第一个元素之后的newsli:\n %v\n&amp;quot;, newsli) fmt.</description>
    </item>
    
    <item>
      <title>关于Slice的几点总结</title>
      <link>https://hapi666.github.io/post/slice/</link>
      <pubDate>Mon, 01 Oct 2018 21:37:55 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/slice/</guid>
      <description> var和make定义方式 使用var定义 var intSlice []int var stringSlice []string //等等，不多余赘述。  使用make定义 mSlice:=make([]type,len,cap) //len是mSlice的长度，cap是mSlice的容量 //长度是已有长度，容量是这个slice的最大长度  下面这两种定义效果一样 var s1 []int s2:=make([]int,0,0)  使用make定义slice的几种方式比较 1.长度和容量都是0，即make([]type,0,0)或make([]type,0) s1:=make([]int,0) for i=0;i&amp;lt;10;i++ { s1=append(s1,i) fmt.Printf(&amp;quot;切片：%v,切片地址：%p,切片长度：%v,切片容量：%v&amp;quot;,s1,s1,len(s1),cap(s1)) }  结论 ：切片长度容量是不断变化的，并且不断重新分配内存，所以效率低下。
2.长度是0，容量不是0，即make([]type,0,cap) s2:=make([]int,0,10) for i=0;i&amp;lt;10;i++ { s2=append(s2,i) fmt.Printf(&amp;quot;切片：%v,切片地址：%p,切片长度：%v,切片容量：%v&amp;quot;,s2,s2,len(s2),cap(s2)) }  结论：切片长度不断变化，容量不变，内存不重新分配，所以效率高。
3.长度容量都不是0，即make([]type,len,cap) s3:=make([]int,10,10) for i=0;i&amp;lt;10;i++ { s3=append(s3,i) fmt.Printf(&amp;quot;切片：%v,切片地址：%p,切片长度：%v,切片容量：%v&amp;quot;,s3,s3,len(s3),cap(s3)) }  结论：切片长度不断变化，容量=起初容量+长度，内存不重新分配，所以效率高，但会出现默认值(因为长度是10，所以会出现10个是0的默认值)，不利于操作。
综合以上结论考虑：建议使用第二种make方式定义slice 即make([]type,0,cap) </description>
    </item>
    
    <item>
      <title>Defer</title>
      <link>https://hapi666.github.io/post/defer/</link>
      <pubDate>Fri, 28 Sep 2018 19:23:53 +0800</pubDate>
      
      <guid>https://hapi666.github.io/post/defer/</guid>
      <description>Defer使用时的坑 先看几个例子
1.
func f() (result int) { defer func() { result++ }() return 0 }  2.
func f() (r int) { t := 5 defer func() { t = t + 5 }() return t }  3.
func f() (r int) { defer func(r int) { r = r + 5 }(r) return 1 }  例1的正确答案不是0，例2的正确答案不是10，例3的正确答案不是6……
Why???
= =!
要使用defer时不踩坑，最重要的一点就是要明白，return xxx这一条语句并不是一条原子指令! 那啥是原子指令？？
所谓原子操作是指不会被 线程调度机制 打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。</description>
    </item>
    
  </channel>
</rss>